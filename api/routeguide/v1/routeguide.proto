syntax = "proto3";

package routeguide.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/api/annotations.proto";
import "routeguide/v1/feature.proto";
import "routeguide/v1/route.proto";

option (gnostic.openapi.v3.document) = {
  info: {
    title: "Route Guide Gateway";
    version: "0.0.1";
  }
  servers: [
    {url: "http://localhost:8081"}]
};

// Interface exported by the server.
service RouteGuideService {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {
    option (google.api.http) = {get: "/v1/features/{point.latitude}/{point.longitude}"};
  }

  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc ListFeatures(ListFeaturesRequest) returns (stream ListFeaturesResponse) {
    option (google.api.http) = {get: "/v1/features"};
  }

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of Points on a route being traversed, returning a
  // RouteSummary when traversal is completed.
  rpc RecordRoute(stream RecordRouteRequest) returns (RecordRouteResponse) {}

  // A Bidirectional streaming RPC.
  //
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users).
  rpc RouteChat(stream RouteChatRequest) returns (stream RouteChatResponse) {}
}
