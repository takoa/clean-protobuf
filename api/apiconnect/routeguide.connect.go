// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: routeguide.proto

package apiconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	api "github.com/takoa/clean-protobuf/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RouteGuideName is the fully-qualified name of the RouteGuide service.
	RouteGuideName = "routeguide.RouteGuide"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RouteGuideGetFeatureProcedure is the fully-qualified name of the RouteGuide's GetFeature RPC.
	RouteGuideGetFeatureProcedure = "/routeguide.RouteGuide/GetFeature"
	// RouteGuideListFeaturesProcedure is the fully-qualified name of the RouteGuide's ListFeatures RPC.
	RouteGuideListFeaturesProcedure = "/routeguide.RouteGuide/ListFeatures"
	// RouteGuideRecordRouteProcedure is the fully-qualified name of the RouteGuide's RecordRoute RPC.
	RouteGuideRecordRouteProcedure = "/routeguide.RouteGuide/RecordRoute"
	// RouteGuideRouteChatProcedure is the fully-qualified name of the RouteGuide's RouteChat RPC.
	RouteGuideRouteChatProcedure = "/routeguide.RouteGuide/RouteChat"
)

// RouteGuideClient is a client for the routeguide.RouteGuide service.
type RouteGuideClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(context.Context, *connect_go.Request[api.Point]) (*connect_go.Response[api.Feature], error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(context.Context, *connect_go.Request[api.Rectangle]) (*connect_go.ServerStreamForClient[api.Feature], error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(context.Context) *connect_go.ClientStreamForClient[api.Point, api.RouteSummary]
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(context.Context) *connect_go.BidiStreamForClient[api.RouteNote, api.RouteNote]
}

// NewRouteGuideClient constructs a client for the routeguide.RouteGuide service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRouteGuideClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RouteGuideClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &routeGuideClient{
		getFeature: connect_go.NewClient[api.Point, api.Feature](
			httpClient,
			baseURL+RouteGuideGetFeatureProcedure,
			opts...,
		),
		listFeatures: connect_go.NewClient[api.Rectangle, api.Feature](
			httpClient,
			baseURL+RouteGuideListFeaturesProcedure,
			opts...,
		),
		recordRoute: connect_go.NewClient[api.Point, api.RouteSummary](
			httpClient,
			baseURL+RouteGuideRecordRouteProcedure,
			opts...,
		),
		routeChat: connect_go.NewClient[api.RouteNote, api.RouteNote](
			httpClient,
			baseURL+RouteGuideRouteChatProcedure,
			opts...,
		),
	}
}

// routeGuideClient implements RouteGuideClient.
type routeGuideClient struct {
	getFeature   *connect_go.Client[api.Point, api.Feature]
	listFeatures *connect_go.Client[api.Rectangle, api.Feature]
	recordRoute  *connect_go.Client[api.Point, api.RouteSummary]
	routeChat    *connect_go.Client[api.RouteNote, api.RouteNote]
}

// GetFeature calls routeguide.RouteGuide.GetFeature.
func (c *routeGuideClient) GetFeature(ctx context.Context, req *connect_go.Request[api.Point]) (*connect_go.Response[api.Feature], error) {
	return c.getFeature.CallUnary(ctx, req)
}

// ListFeatures calls routeguide.RouteGuide.ListFeatures.
func (c *routeGuideClient) ListFeatures(ctx context.Context, req *connect_go.Request[api.Rectangle]) (*connect_go.ServerStreamForClient[api.Feature], error) {
	return c.listFeatures.CallServerStream(ctx, req)
}

// RecordRoute calls routeguide.RouteGuide.RecordRoute.
func (c *routeGuideClient) RecordRoute(ctx context.Context) *connect_go.ClientStreamForClient[api.Point, api.RouteSummary] {
	return c.recordRoute.CallClientStream(ctx)
}

// RouteChat calls routeguide.RouteGuide.RouteChat.
func (c *routeGuideClient) RouteChat(ctx context.Context) *connect_go.BidiStreamForClient[api.RouteNote, api.RouteNote] {
	return c.routeChat.CallBidiStream(ctx)
}

// RouteGuideHandler is an implementation of the routeguide.RouteGuide service.
type RouteGuideHandler interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	GetFeature(context.Context, *connect_go.Request[api.Point]) (*connect_go.Response[api.Feature], error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(context.Context, *connect_go.Request[api.Rectangle], *connect_go.ServerStream[api.Feature]) error
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(context.Context, *connect_go.ClientStream[api.Point]) (*connect_go.Response[api.RouteSummary], error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(context.Context, *connect_go.BidiStream[api.RouteNote, api.RouteNote]) error
}

// NewRouteGuideHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRouteGuideHandler(svc RouteGuideHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	routeGuideGetFeatureHandler := connect_go.NewUnaryHandler(
		RouteGuideGetFeatureProcedure,
		svc.GetFeature,
		opts...,
	)
	routeGuideListFeaturesHandler := connect_go.NewServerStreamHandler(
		RouteGuideListFeaturesProcedure,
		svc.ListFeatures,
		opts...,
	)
	routeGuideRecordRouteHandler := connect_go.NewClientStreamHandler(
		RouteGuideRecordRouteProcedure,
		svc.RecordRoute,
		opts...,
	)
	routeGuideRouteChatHandler := connect_go.NewBidiStreamHandler(
		RouteGuideRouteChatProcedure,
		svc.RouteChat,
		opts...,
	)
	return "/routeguide.RouteGuide/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RouteGuideGetFeatureProcedure:
			routeGuideGetFeatureHandler.ServeHTTP(w, r)
		case RouteGuideListFeaturesProcedure:
			routeGuideListFeaturesHandler.ServeHTTP(w, r)
		case RouteGuideRecordRouteProcedure:
			routeGuideRecordRouteHandler.ServeHTTP(w, r)
		case RouteGuideRouteChatProcedure:
			routeGuideRouteChatHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRouteGuideHandler returns CodeUnimplemented from all methods.
type UnimplementedRouteGuideHandler struct{}

func (UnimplementedRouteGuideHandler) GetFeature(context.Context, *connect_go.Request[api.Point]) (*connect_go.Response[api.Feature], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("routeguide.RouteGuide.GetFeature is not implemented"))
}

func (UnimplementedRouteGuideHandler) ListFeatures(context.Context, *connect_go.Request[api.Rectangle], *connect_go.ServerStream[api.Feature]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("routeguide.RouteGuide.ListFeatures is not implemented"))
}

func (UnimplementedRouteGuideHandler) RecordRoute(context.Context, *connect_go.ClientStream[api.Point]) (*connect_go.Response[api.RouteSummary], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("routeguide.RouteGuide.RecordRoute is not implemented"))
}

func (UnimplementedRouteGuideHandler) RouteChat(context.Context, *connect_go.BidiStream[api.RouteNote, api.RouteNote]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("routeguide.RouteGuide.RouteChat is not implemented"))
}
